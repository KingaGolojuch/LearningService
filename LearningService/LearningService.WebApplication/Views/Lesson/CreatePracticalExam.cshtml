@model LearningService.WebApplication.Models.Lesson.LessonPracticalExamViewModel
@{
    ViewBag.Title = "Tworzenie egzaminu praktycznego";
}
<script src="https://cdn.jsdelivr.net/npm/vue"></script>
<div id="app">

    <h2>Tworzenie egzaminu praktycznego</h2>
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(model => model.CourseId)

        <div class="form-horizontal">
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            <div class="form-group">
                @Html.LabelFor(model => model.Headline, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Headline, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Headline, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.LessonContent, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.LessonContent, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.LessonContent, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.SelectedOption, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.SelectedOption, Model.ReturnTypeOptions, new Dictionary<string,object>() {{ "class", "form-control" }, { @"v-on:change", @"CheckAnswerVisible" }, { @"v-model", "SelectedOptionVue" } })
                    @Html.ValidationMessageFor(model => model.SelectedOption, "", new { @class = "text-danger" })
                </div>
            </div>

            <div v-if="IsAnswerVisible" class="form-group">
                @Html.LabelFor(model => model.Answer, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextBoxFor(model => model.Answer, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Answer, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Create" class="btn btn-default" />
                </div>
            </div>

            <div v-on:click="submitForm" class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="button" value="dodaj nowy wymagany" class="btn btn-primary" />
                </div>
            </div>
            <div class="row" >
                <button-counter v-for="(item, index) in RequiredNames" v-bind:item="item"
  v-bind:index="index"
  v-bind:key="item.id">

                </button-counter>
            </div>
            <div class="row" v-for="(row, index) in RequiredNames">
                <div class="form-group">
                    <label class="control-label col-md-2">Nazwa</label>
                    <div class="col-md-10">
                        <input data-val="true" data-val-required="Pole Nazwa jest wymagane" type="text" id={{index+1}} name="{{++index}}" class="form-control text-box single-line">
                        <span>row: {{row}}</span>
                        <span>index: {{index}}</span>
                    </div>
                </div>
            </div>
            
                @*<div v-for="option in RequiredNames" >
                    <input type="text" v-bind:value="option.value"/>
                </div>*@
        </div>
    }

</div>
@section Scripts {
    <script>
        jQuery.ajaxSettings.traditional = true;
        const urls = {
            SaveExam: '@Url.Action("VueCreatePracticalExamVue", "Lesson")'
        };
        const model = @Html.Raw(Json.Encode(Model));
        const $api = {};
        $api.exam = {
            create(exam) {
                return jQuery.ajax({
                    url: urls.SaveExam,
                    type: "POST",
                    dataType: "json",
                    contentType: "application/json; charset=utf-8",
                    data: JSON.stringify(exam),
                    async: true,
                    processData: false,
                    cache: false,
                    error: (xhr) => { }
                });
            }
        },
        Vue.component('button-counter', {
            data: function () {
                return {
                    count: 0
                }
            },
            template: `
                    <div class="form-group">
                        <label class="control-label col-md-2">Nazwa</label> 
                        <div class="col-md-10">
                            <input data-val="true" data-val-required="Pole Nazwa jest wymagane" type="text" name="Val.[{{ count }}].Name" class="form-control text-box single-line">
    <button type="button" v-on:click="count++">You clicked me {{ count }} times.</button>'
                        </div>
                    </div>
                `
        });

        var app = new Vue({
            el: '#app',
            data: {
                SelectedOptionVue: model.SelectedOption,
                IsAnswerVisible: (model.SelectedOption !== null && model.SelectedOption !== 'void'),
                RequiredNames: [],
                model: model
            },
            methods: {
                CheckAnswerVisible: function (e) {
                    this.IsAnswerVisible = (this.SelectedOptionVue !== null && this.SelectedOptionVue !== 'void');
                },
                greet: function (event) {
                    this.RequiredNames.push('');
                },
                submitForm: function (event) {
                    $api.exam.create(this.model).then(() => {
                        alert('wyslane');
                    }).fail((resp) => {
                        alert('blad');
                    });
                }
            }
        })
    </script>    
}

