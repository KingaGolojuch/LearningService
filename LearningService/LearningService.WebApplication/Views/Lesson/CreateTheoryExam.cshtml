@model LearningService.WebApplication.Models.Lesson.LessonTheoryExamViewModel
@{
    ViewBag.Title = "Tworzenie egzaminu teoretycznego";
}
@Html.Action("LessonManagementHeader", new { courseId = Model.CourseId })

<div class="row">
    @Html.Action("LessonManagementBase", new { courseId = Model.CourseId })
    <div class="col-md-6 form-input-full-width">
        <h3>Tworzenie egzaminu teoretycznego</h3>
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(x => x.CourseId)

            <div class="">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                <div class="form-group">
                    @Html.LabelFor(model => model.Headline, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.Headline, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Headline, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.LessonContent, htmlAttributes: new { @class = "control-label" })
                        @Html.TextAreaFor(model => model.LessonContent, new { @id = "lessonTheoryContent", @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.LessonContent, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    <input id="btnAddNewOptionThoery" type="button" value="Dodaj nową opcję" class="btn btn-default" />
                </div>
                <div id="formCreateTheoryExam">
                    @for (int i = 0; i < Model.Options.Count; i++)
                    {
                        <div class="form-group">
                            <label class="control-label"></label>
                                @Html.CheckBoxFor(x => x.Options[i].Selected)
                                @Html.TextBoxFor(x => x.Options[i].Name)
                        </div>
                    }
                </div>

                <div class="form-group">
                    <input type="submit" value="Zapisz" class="btn btn-primary" />
                </div>
            </div>
        }
    </div>
</div>
<template id="theory-exam-row">
    @Html.Partial("_TheoryExamItem", Model)
</template>

@section scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        var countedOptions = @Model.CountOfOptions;
        (function ($) {
            $('#lessonTheoryContent').summernote({
                focus: true,
                height: 150,
                tabSize: 4,
                tabDisable: true,
                codemirror: {
                    theme: 'united'
                },
                toolbar: [
                    ['style', ['bold', 'italic', 'underline', 'clear']],
                    ['font', ['superscript', 'subscript']],
                    ['color', ['color']],
                    ['style', ['style']],
                    ['table', ['table']],
                    ['para', ['ul', 'ol', 'paragraph']],
                    ['insert', ['link']]
                ]
            });

            $('#btnAddNewOptionThoery').click(function () {
                var rowToAdd = document.getElementById("theory-exam-row");
                rowToAdd.content.querySelector('.optionCheckBox').setAttribute("name", 'Options[' + countedOptions + '].Selected');
                rowToAdd.content.querySelector('.optionName').setAttribute("name", 'Options[' + countedOptions + '].Name');
                var theoryExamOptionsParent = document.getElementById("formCreateTheoryExam");
                var clon = rowToAdd.content.cloneNode(true);
                $(clon).appendTo(theoryExamOptionsParent);
                countedOptions = countedOptions + 1;
            });

        })(jQuery);
    </script>
}
